"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/pages/admins/users-management/page",{

/***/ "(app-pages-browser)/./src/js/apiService.ts":
/*!******************************!*\
  !*** ./src/js/apiService.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService),\n/* harmony export */   createDepartment: () => (/* binding */ createDepartment),\n/* harmony export */   createPosition: () => (/* binding */ createPosition),\n/* harmony export */   createRank: () => (/* binding */ createRank),\n/* harmony export */   createUnit: () => (/* binding */ createUnit),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   deleteDepartment: () => (/* binding */ deleteDepartment),\n/* harmony export */   deletePosition: () => (/* binding */ deletePosition),\n/* harmony export */   deleteRank: () => (/* binding */ deleteRank),\n/* harmony export */   deleteUnit: () => (/* binding */ deleteUnit),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   exportAuditLogs: () => (/* binding */ exportAuditLogs),\n/* harmony export */   getAuditLogs: () => (/* binding */ getAuditLogs),\n/* harmony export */   getAuditStats: () => (/* binding */ getAuditStats),\n/* harmony export */   getDepartments: () => (/* binding */ getDepartments),\n/* harmony export */   getPositions: () => (/* binding */ getPositions),\n/* harmony export */   getRanks: () => (/* binding */ getRanks),\n/* harmony export */   getUnits: () => (/* binding */ getUnits),\n/* harmony export */   getUserActivity: () => (/* binding */ getUserActivity),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   login: () => (/* binding */ login),\n/* harmony export */   updateDepartment: () => (/* binding */ updateDepartment),\n/* harmony export */   updatePosition: () => (/* binding */ updatePosition),\n/* harmony export */   updateRank: () => (/* binding */ updateRank),\n/* harmony export */   updateUnit: () => (/* binding */ updateUnit),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// Base URL cho API\nconst API_BASE_URL = 'http://localhost:5002/api';\nconst apiService = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n// Add request interceptor to include token in all requests\napiService.interceptors.request.use((config)=>{\n    const token = localStorage.getItem('token');\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Add response interceptor to handle token expiration\napiService.interceptors.response.use((response)=>{\n    return response;\n}, (error)=>{\n    var _error_response;\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n        // Token expired or invalid, clear local storage and redirect to login\n        localStorage.removeItem('token');\n        localStorage.removeItem('userData');\n        window.location.href = '/auth/signin';\n    }\n    return Promise.reject(error);\n});\nconst login = async (email, password)=>{\n    try {\n        const response = await apiService.post('/auth/login', {\n            email,\n            password\n        });\n        // Kiểm tra cấu trúc response từ backend\n        const responseData = response.data;\n        console.log('Login response:', responseData);\n        let token;\n        let user;\n        if (responseData.data && responseData.data.token) {\n            // Cấu trúc: { data: { token: \"...\", user: {...} } }\n            token = responseData.data.token;\n            user = responseData.data.user;\n        } else if (responseData.token) {\n            // Cấu trúc: { token: \"...\" }\n            token = responseData.token;\n            user = responseData.user;\n        } else {\n            throw new Error('Token not found in response');\n        }\n        localStorage.setItem('token', token);\n        // Lưu thông tin user vào localStorage\n        if (user) {\n            const userData = {\n                _id: user._id,\n                token: token,\n                role: user.role,\n                fullName: user.fullName,\n                username: user.username,\n                email: user.email,\n                department: user.department,\n                position: user.position,\n                phone: user.phone,\n                isActive: user.isActive,\n                lastLogin: user.lastLogin,\n                avatar: user.avatar\n            };\n            localStorage.setItem('userData', JSON.stringify(userData));\n        }\n        return {\n            token\n        };\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error('Login error:', error);\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || error.message || 'Failed to login');\n    }\n};\nconst getUsers = async ()=>{\n    try {\n        const response = await apiService.get('/users');\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to fetch users');\n    }\n};\nconst updateUser = async (userId, user)=>{\n    try {\n        const response = await apiService.put(\"/users/\".concat(userId), user);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to update user');\n    }\n};\nconst createUser = async (user)=>{\n    try {\n        const response = await apiService.post('/users', user);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to create user');\n    }\n};\nconst deleteUser = async (userId)=>{\n    try {\n        await apiService.delete(\"/users/\".concat(userId));\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to delete user');\n    }\n};\nconst getRanks = async ()=>{\n    try {\n        const response = await apiService.get('/ranks');\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to fetch ranks');\n    }\n};\nconst createRank = async (rank)=>{\n    try {\n        const response = await apiService.post('/ranks', rank);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to create rank');\n    }\n};\nconst updateRank = async (rankId, rank)=>{\n    try {\n        const response = await apiService.put(\"/ranks/\".concat(rankId), rank);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to update rank');\n    }\n};\nconst deleteRank = async (rankId)=>{\n    try {\n        await apiService.delete(\"/ranks/\".concat(rankId));\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to delete rank');\n    }\n};\nconst getUnits = async ()=>{\n    try {\n        const response = await apiService.get('/units');\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to fetch units');\n    }\n};\nconst createUnit = async (unit)=>{\n    try {\n        const response = await apiService.post('/units', unit);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to create unit');\n    }\n};\nconst updateUnit = async (unitId, unit)=>{\n    try {\n        const response = await apiService.put(\"/units/\".concat(unitId), unit);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to update unit');\n    }\n};\nconst deleteUnit = async (unitId)=>{\n    try {\n        await apiService.delete(\"/units/\".concat(unitId));\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to delete unit');\n    }\n};\nconst getDepartments = async ()=>{\n    try {\n        const response = await apiService.get('/departments');\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to fetch departments');\n    }\n};\nconst createDepartment = async (department)=>{\n    try {\n        const response = await apiService.post('/departments', department);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to create department');\n    }\n};\nconst updateDepartment = async (departmentId, department)=>{\n    try {\n        const response = await apiService.put(\"/departments/\".concat(departmentId), department);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to update department');\n    }\n};\nconst deleteDepartment = async (departmentId)=>{\n    try {\n        await apiService.delete(\"/departments/\".concat(departmentId));\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to delete department');\n    }\n};\nconst getPositions = async ()=>{\n    try {\n        const response = await apiService.get('/positions');\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to fetch positions');\n    }\n};\nconst createPosition = async (position)=>{\n    try {\n        const response = await apiService.post('/positions', position);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to create position');\n    }\n};\nconst updatePosition = async (positionId, position)=>{\n    try {\n        const response = await apiService.put(\"/positions/\".concat(positionId), position);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to update position');\n    }\n};\nconst deletePosition = async (positionId)=>{\n    try {\n        await apiService.delete(\"/positions/\".concat(positionId));\n    } catch (error) {\n        var _error_response_data, _error_response;\n        throw new Error(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Failed to delete position');\n    }\n};\nconst getAuditLogs = async function() {\n    let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    try {\n        const queryParams = new URLSearchParams();\n        Object.entries(filters).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined && value !== null && value !== '') {\n                queryParams.append(key, value.toString());\n            }\n        });\n        const response = await apiService.get(\"/audit-logs?\".concat(queryParams));\n        return response.data.data;\n    } catch (error) {\n        console.error('Error fetching audit logs:', error);\n        throw error;\n    }\n};\nconst getAuditStats = async function() {\n    let days = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30;\n    try {\n        const response = await apiService.get(\"/audit-logs/stats?days=\".concat(days));\n        return response.data.data;\n    } catch (error) {\n        console.error('Error fetching audit stats:', error);\n        throw error;\n    }\n};\nconst getUserActivity = async function(userId) {\n    let days = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 30;\n    try {\n        const response = await apiService.get(\"/audit-logs/user/\".concat(userId, \"?days=\").concat(days));\n        return response.data.data;\n    } catch (error) {\n        console.error('Error fetching user activity:', error);\n        throw error;\n    }\n};\nconst exportAuditLogs = async (filters)=>{\n    try {\n        const response = await apiService.post('/audit-logs/export', filters);\n        return response.data;\n    } catch (error) {\n        console.error('Error exporting audit logs:', error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/js/apiService.ts\n"));

/***/ })

});