const cron = require('node-cron');
const TaskAssignment = require('../models/TaskAssignment');
const Notification = require('../models/Notification');
const User = require('../models/User');

class ReminderService {
  constructor() {
    this.startReminderCron();
  }

  // Kh·ªüi ƒë·ªông cron job ƒë·ªÉ ki·ªÉm tra nh·∫Øc nh·ªü
  startReminderCron() {
    // Ch·∫°y m·ªói 30 ph√∫t ƒë·ªÉ ki·ªÉm tra nh·∫Øc nh·ªü
    cron.schedule('*/30 * * * *', () => {
      this.checkAndSendReminders();
    });

    // Ch·∫°y m·ªói ng√†y l√∫c 8h s√°ng ƒë·ªÉ ki·ªÉm tra c√¥ng vi·ªác qu√° h·∫°n
    cron.schedule('0 8 * * *', () => {
      this.checkOverdueTasks();
    });

    console.log('‚úÖ Reminder service started');
  }

  // Ki·ªÉm tra v√† g·ª≠i nh·∫Øc nh·ªü
  async checkAndSendReminders() {
    try {
      const now = new Date();
      
      // T√¨m c√°c nh·∫Øc nh·ªü c·∫ßn g·ª≠i
      const tasks = await TaskAssignment.find({
        'reminders.sent': false,
        'reminders.scheduledAt': { $lte: now }
      }).populate('assignedTo assignedBy');

      for (const task of tasks) {
        for (const reminder of task.reminders) {
          if (!reminder.sent && new Date(reminder.scheduledAt) <= now) {
            await this.sendReminder(task, reminder);
            
            // ƒê√°nh d·∫•u ƒë√£ g·ª≠i
            reminder.sent = true;
            reminder.sentAt = new Date();
          }
        }
        
        await task.save();
      }
    } catch (error) {
      console.error('Error checking reminders:', error);
    }
  }

  // G·ª≠i nh·∫Øc nh·ªü
  async sendReminder(task, reminder) {
    try {
      // T·∫°o th√¥ng b√°o trong h·ªá th·ªëng
      const notification = new Notification({
        title: 'Nh·∫Øc nh·ªü c√¥ng vi·ªác',
        message: reminder.message,
        type: 'task_reminder',
        userId: task.assignedTo._id,
        relatedId: task._id,
        relatedType: 'TaskAssignment',
        priority: task.priority === 'urgent' ? 'high' : 'medium',
        data: {
          taskId: task._id,
          taskTitle: task.title,
          deadline: task.deadline,
          priority: task.priority
        }
      });

      await notification.save();

      // G·ª≠i email nh·∫Øc nh·ªü (n·∫øu c√≥ c·∫•u h√¨nh email)
      if (reminder.type === 'email') {
        await this.sendEmailReminder(task, reminder);
      }

      // G·ª≠i SMS nh·∫Øc nh·ªü (n·∫øu c√≥ c·∫•u h√¨nh SMS)
      if (reminder.type === 'sms') {
        await this.sendSMSReminder(task, reminder);
      }

      console.log(`‚úÖ Reminder sent for task: ${task.title}`);
    } catch (error) {
      console.error('Error sending reminder:', error);
    }
  }

  // G·ª≠i email nh·∫Øc nh·ªü
  async sendEmailReminder(task, reminder) {
    // TODO: Implement email service
    console.log(`üìß Email reminder for task: ${task.title}`);
  }

  // G·ª≠i SMS nh·∫Øc nh·ªü
  async sendSMSReminder(task, reminder) {
    // TODO: Implement SMS service
    console.log(`üì± SMS reminder for task: ${task.title}`);
  }

  // Ki·ªÉm tra c√¥ng vi·ªác qu√° h·∫°n
  async checkOverdueTasks() {
    try {
      const now = new Date();
      
      // T√¨m c√°c c√¥ng vi·ªác qu√° h·∫°n
      const overdueTasks = await TaskAssignment.find({
        status: { $in: ['pending', 'in_progress'] },
        deadline: { $lt: now }
      }).populate('assignedTo assignedBy unit');

      for (const task of overdueTasks) {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh qu√° h·∫°n
        if (task.status !== 'overdue') {
          task.status = 'overdue';
          await task.save();

          // T·∫°o th√¥ng b√°o qu√° h·∫°n
          const notification = new Notification({
            title: 'C√¥ng vi·ªác qu√° h·∫°n',
            message: `C√¥ng vi·ªác "${task.title}" ƒë√£ qu√° h·∫°n. Vui l√≤ng ho√†n th√†nh s·ªõm nh·∫•t c√≥ th·ªÉ.`,
            type: 'task_overdue',
            userId: task.assignedTo._id,
            relatedId: task._id,
            relatedType: 'TaskAssignment',
            priority: 'high',
            data: {
              taskId: task._id,
              taskTitle: task.title,
              deadline: task.deadline,
              daysOverdue: Math.ceil((now - new Date(task.deadline)) / (1000 * 60 * 60 * 24))
            }
          });

          await notification.save();

          // Th√¥ng b√°o cho ng∆∞·ªùi giao vi·ªác
          const assignerNotification = new Notification({
            title: 'C√¥ng vi·ªác qu√° h·∫°n',
            message: `C√¥ng vi·ªác "${task.title}" ƒë∆∞·ª£c giao cho ${task.assignedTo.name} ƒë√£ qu√° h·∫°n.`,
            type: 'task_overdue_assigner',
            userId: task.assignedBy._id,
            relatedId: task._id,
            relatedType: 'TaskAssignment',
            priority: 'medium',
            data: {
              taskId: task._id,
              taskTitle: task.title,
              assignedTo: task.assignedTo.name,
              deadline: task.deadline
            }
          });

          await assignerNotification.save();

          console.log(`‚ö†Ô∏è Overdue task notification sent: ${task.title}`);
        }
      }
    } catch (error) {
      console.error('Error checking overdue tasks:', error);
    }
  }

  // T·∫°o nh·∫Øc nh·ªü t·ª± ƒë·ªông cho c√¥ng vi·ªác m·ªõi
  async createAutomaticReminders(taskId) {
    try {
      const task = await TaskAssignment.findById(taskId);
      if (!task) return;

      const deadline = new Date(task.deadline);
      const now = new Date();

      // Nh·∫Øc nh·ªü 24 gi·ªù tr∆∞·ªõc h·∫°n
      const reminder24h = new Date(deadline.getTime() - 24 * 60 * 60 * 1000);
      if (reminder24h > now) {
        await task.addReminder(
          'notification',
          `Nh·∫Øc nh·ªü: C√¥ng vi·ªác "${task.title}" s·∫Ω h·∫øt h·∫°n trong 24 gi·ªù`,
          reminder24h
        );
      }

      // Nh·∫Øc nh·ªü 2 gi·ªù tr∆∞·ªõc h·∫°n
      const reminder2h = new Date(deadline.getTime() - 2 * 60 * 60 * 1000);
      if (reminder2h > now) {
        await task.addReminder(
          'notification',
          `Nh·∫Øc nh·ªü kh·∫©n c·∫•p: C√¥ng vi·ªác "${task.title}" s·∫Ω h·∫øt h·∫°n trong 2 gi·ªù`,
          reminder2h
        );
      }

      // Nh·∫Øc nh·ªü 30 ph√∫t tr∆∞·ªõc h·∫°n
      const reminder30m = new Date(deadline.getTime() - 30 * 60 * 1000);
      if (reminder30m > now) {
        await task.addReminder(
          'notification',
          `Nh·∫Øc nh·ªü kh·∫©n c·∫•p: C√¥ng vi·ªác "${task.title}" s·∫Ω h·∫øt h·∫°n trong 30 ph√∫t`,
          reminder30m
        );
      }

      console.log(`‚úÖ Automatic reminders created for task: ${task.title}`);
    } catch (error) {
      console.error('Error creating automatic reminders:', error);
    }
  }

  // G·ª≠i nh·∫Øc nh·ªü th·ªß c√¥ng
  async sendManualReminder(taskId, message, scheduledAt) {
    try {
      const task = await TaskAssignment.findById(taskId);
      if (!task) throw new Error('Task not found');

      await task.addReminder('notification', message, new Date(scheduledAt));
      
      console.log(`‚úÖ Manual reminder scheduled for task: ${task.title}`);
      return true;
    } catch (error) {
      console.error('Error sending manual reminder:', error);
      return false;
    }
  }

  // L·∫•y danh s√°ch nh·∫Øc nh·ªü s·∫Øp t·ªõi
  async getUpcomingReminders(userId, limit = 10) {
    try {
      const tasks = await TaskAssignment.find({
        assignedTo: userId,
        'reminders.sent': false,
        'reminders.scheduledAt': { $gte: new Date() }
      })
      .populate('bookId', 'title')
      .sort({ 'reminders.scheduledAt': 1 })
      .limit(limit);

      const reminders = [];
      tasks.forEach(task => {
        task.reminders.forEach(reminder => {
          if (!reminder.sent && new Date(reminder.scheduledAt) >= new Date()) {
            reminders.push({
              id: reminder._id,
              taskId: task._id,
              taskTitle: task.title,
              bookTitle: task.bookId.title,
              message: reminder.message,
              scheduledAt: reminder.scheduledAt,
              type: reminder.type
            });
          }
        });
      });

      return reminders.sort((a, b) => new Date(a.scheduledAt) - new Date(b.scheduledAt));
    } catch (error) {
      console.error('Error getting upcoming reminders:', error);
      return [];
    }
  }
}

module.exports = new ReminderService();
